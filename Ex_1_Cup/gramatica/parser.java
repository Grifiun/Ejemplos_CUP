
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gramatica;

import java_cup.runtime.*;
import gramatica.sym;
import gramatica.Lexer;
import java_cup.runtime.XMLElement;
import clasesDAO.Token;
import clasesDAO.TokenError;
import java.util.ArrayList;
import java.util.List;
import entidades.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\014\002\000\002\003\006\000\002\004\005" +
    "\000\002\004\002\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\014\000\002\007\003\000\002" +
    "\007\003\000\002\010\004\000\002\010\004\000\002\011" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\003\000\002\012\004\000\002\012" +
    "\005\000\002\012\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\006\002\uffff\014\005\001\002\000\004\002" +
    "\000\001\002\000\012\015\ufffe\031\ufffe\035\ufffe\040\ufffe" +
    "\001\002\000\004\002\007\001\002\000\004\002\001\001" +
    "\002\000\012\015\ufffb\031\ufffb\035\ufffb\040\ufffb\001\002" +
    "\000\012\015\012\031\016\035\014\040\013\001\002\000" +
    "\006\002\ufffd\032\ufffd\001\002\000\004\005\076\001\002" +
    "\000\004\040\074\001\002\000\004\017\ufffa\001\002\000" +
    "\004\012\023\001\002\000\004\017\ufff9\001\002\000\004" +
    "\017\022\001\002\000\004\017\ufff8\001\002\000\012\015" +
    "\ufffc\031\ufffc\035\ufffc\040\ufffc\001\002\000\006\035\014" +
    "\040\013\001\002\000\004\017\027\001\002\000\004\017" +
    "\ufff5\001\002\000\004\017\ufff6\001\002\000\016\003\032" +
    "\012\033\026\036\036\035\037\037\040\031\001\002\000" +
    "\030\006\042\007\046\017\067\021\043\022\047\023\051" +
    "\024\044\025\052\026\045\027\050\030\041\001\002\000" +
    "\032\006\uffe1\007\uffe1\013\uffe1\017\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\001" +
    "\002\000\032\006\uffe4\007\uffe4\013\uffe4\017\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\001\002\000\016\003\032\012\033\026\036\036\035" +
    "\037\037\040\031\001\002\000\032\006\uffe7\007\uffe7\013" +
    "\uffe7\017\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\026\uffe7\027\uffe7\030\uffe7\001\002\000\032\006\uffe3\007" +
    "\uffe3\013\uffe3\017\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\030\uffe3\001\002\000\016\003" +
    "\032\012\033\026\036\036\035\037\037\040\031\001\002" +
    "\000\032\006\uffe2\007\uffe2\013\uffe2\017\uffe2\021\uffe2\022" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\001\002\000\032\006\uffe6\007\uffe6\013\uffe6\017\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\050" +
    "\030\041\001\002\000\016\003\032\012\033\026\036\036" +
    "\035\037\037\040\031\001\002\000\016\003\032\012\033" +
    "\026\036\036\035\037\037\040\031\001\002\000\016\003" +
    "\032\012\033\026\036\036\035\037\037\040\031\001\002" +
    "\000\016\003\032\012\033\026\036\036\035\037\037\040" +
    "\031\001\002\000\016\003\032\012\033\026\036\036\035" +
    "\037\037\040\031\001\002\000\016\003\032\012\033\026" +
    "\036\036\035\037\037\040\031\001\002\000\016\003\032" +
    "\012\033\026\036\036\035\037\037\040\031\001\002\000" +
    "\016\003\032\012\033\026\036\036\035\037\037\040\031" +
    "\001\002\000\016\003\032\012\033\026\036\036\035\037" +
    "\037\040\031\001\002\000\016\003\032\012\033\026\036" +
    "\036\035\037\037\040\031\001\002\000\032\006\uffeb\007" +
    "\uffeb\013\uffeb\017\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\025\uffeb\026\uffeb\027\050\030\041\001\002\000\022\013" +
    "\uffee\017\uffee\021\uffee\022\uffee\025\052\026\045\027\050" +
    "\030\041\001\002\000\032\006\uffe9\007\uffe9\013\uffe9\017" +
    "\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9" +
    "\027\uffe9\030\uffe9\001\002\000\026\006\042\007\046\013" +
    "\uffed\017\uffed\023\051\024\044\025\052\026\045\027\050" +
    "\030\041\001\002\000\022\013\ufff1\017\ufff1\021\ufff1\022" +
    "\ufff1\025\052\026\045\027\050\030\041\001\002\000\032" +
    "\006\uffea\007\uffea\013\uffea\017\uffea\021\uffea\022\uffea\023" +
    "\uffea\024\uffea\025\uffea\026\uffea\027\050\030\041\001\002" +
    "\000\022\013\uffef\017\uffef\021\uffef\022\uffef\025\052\026" +
    "\045\027\050\030\041\001\002\000\026\006\042\007\046" +
    "\013\uffec\017\uffec\023\051\024\044\025\052\026\045\027" +
    "\050\030\041\001\002\000\022\013\ufff0\017\ufff0\021\ufff0" +
    "\022\ufff0\025\052\026\045\027\050\030\041\001\002\000" +
    "\032\006\uffe8\007\uffe8\013\uffe8\017\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\001" +
    "\002\000\030\006\042\007\046\013\066\021\043\022\047" +
    "\023\051\024\044\025\052\026\045\027\050\030\041\001" +
    "\002\000\032\006\uffe5\007\uffe5\013\uffe5\017\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\001\002\000\016\003\032\012\033\026\036\036\035" +
    "\037\037\040\031\001\002\000\030\006\042\007\046\013" +
    "\071\021\043\022\047\023\051\024\044\025\052\026\045" +
    "\027\050\030\041\001\002\000\004\014\005\001\002\000" +
    "\004\032\073\001\002\000\004\017\ufff7\001\002\000\006" +
    "\005\076\017\ufff4\001\002\000\004\017\ufff3\001\002\000" +
    "\016\003\032\012\033\026\036\036\035\037\037\040\031" +
    "\001\002\000\030\006\042\007\046\017\ufff2\021\043\022" +
    "\047\023\051\024\044\025\052\026\045\027\050\030\041" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\004\014\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\010\001\001\000\012\005\017\006" +
    "\014\010\016\011\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\023\010\024\011" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\027\013\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\064" +
    "\013\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\037\013\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\063\013\033\001\001\000\006\012" +
    "\062\013\033\001\001\000\006\012\061\013\033\001\001" +
    "\000\006\012\060\013\033\001\001\000\006\012\057\013" +
    "\033\001\001\000\006\012\056\013\033\001\001\000\006" +
    "\012\055\013\033\001\001\000\006\012\054\013\033\001" +
    "\001\000\006\012\053\013\033\001\001\000\006\012\052" +
    "\013\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\067\013\033\001\001\000\002\001\001\000" +
    "\004\003\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\076\013" +
    "\033\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Listado de errores	
	//Controlador de error sintactico
    ArrayList<TokenError> listadoErroresSintacticos = new ArrayList();
	ListadoInstrucciones listadoInstruccionesGenerales;

	int ident = 0;

	@Override
	public void syntax_error(Symbol a){
		Token tokenError = (Token) a.value;//lo transformamos en token para obtener su lexema, fila y columna		
		String msgError = "Se esperaba: ";	
		
                
		int linea = (tokenError != null) ? tokenError.getLinea() : 0;
		int columna = (tokenError != null) ? tokenError.getColumna() : 0;

		if(a.sym == sym.EOF){
			System.out.println("END OF FILE");
			TokenError tokenErrorAux = new TokenError("ERROR SINTACTICO", "Etiqueta de cierre", "La etiqueta de cierre debe ser <C_GCIC>", -1, -1);
			listadoErroresSintacticos.add(tokenErrorAux);
		}else{
			for(int i = 0; i < expected_token_ids().size(); i++){
				//msgError = msgError + mensajes[expected_token_ids().get(i)];
				msgError = msgError + symbl_name_from_id(expected_token_ids().get(i)) + " ";

				if(i < expected_token_ids().size() - 1)
					msgError = msgError + ", ";			
			}
			//System.out.println("error de sintaxis: linea: "+tokenError.getLexema()+" "+tokenError.getLinea()+" columna: "+tokenError.getColumna()+" MENSAJE: "+msgError);
			TokenError tokenErrorAux = new TokenError("ERROR SINTACTICO", tokenError.getLexema(), msgError, linea, columna);
			listadoErroresSintacticos.add(tokenErrorAux);
		}		
	}
	
	public void report_error(String message, Object info) {
        System.out.println("Reportar Error");
    }
    
	public void report_fatal_error(String message, Object info) {
        System.out.println("Error Fatal: " + info);
    }

	public void aumentarIdentacion(){
		ident++;
	}

	public void reducirIdentacion(){
		ident--;
	}

	public int getIdentacion(){
		return this.ident;
	}

    protected int error_sync_size() {
        return 1;
    }

	public void setListadoInstrucciones(ListadoInstrucciones listado){
		this.listadoInstruccionesGenerales = listado;
	}

	public String obtenerCodigoJava(){
		if(listadoInstruccionesGenerales != null){
			return listadoInstruccionesGenerales.generarCodigoJavaGOD();
		}else{
			return "";
		}
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= bloque_instrucciones 
            {
              Object RESULT =null;
		int bloqueInstruccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueInstruccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListadoInstrucciones bloqueInstrucciones = (ListadoInstrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 setListadoInstrucciones(bloqueInstrucciones); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              ListadoInstrucciones RESULT =null;
 aumentarIdentacion(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloque_instrucciones ::= LLAVE_INI NT$0 instruccion_varios LLAVE_FIN 
            {
              ListadoInstrucciones RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (ListadoInstrucciones) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listadoInstruccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listadoInstruccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Traductor> listadoInstrucciones = (ArrayList<Traductor>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		ListadoInstrucciones listadoInstruccionesAux = new ListadoInstrucciones(listadoInstrucciones);
		reducirIdentacion();
		RESULT = listadoInstruccionesAux;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion_varios ::= instruccion_varios instruccion PUNTO_COMA 
            {
              ArrayList<Traductor> RESULT =null;
		int listadoActualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listadoActualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Traductor> listadoActual = (ArrayList<Traductor>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Traductor instruccion = (Traductor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		listadoActual.add(instruccion);
		RESULT = listadoActual;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_varios",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion_varios ::= 
            {
              ArrayList<Traductor> RESULT =null;
		
		RESULT = new ArrayList();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_varios",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= instruccion_para 
            {
              Traductor RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Traductor instruccion = (Traductor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = instruccion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= declaracion 
            {
              Traductor RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaracion instruccion = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = instruccion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= asignacion 
            {
              Traductor RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Asignacion instruccion = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = instruccion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion_para ::= PARA PAREN_INI instruccion_para_inicio PUNTO_COMA operacion_general PUNTO_COMA operacion_general PAREN_FIN bloque_instrucciones FIN_PARA 
            {
              Traductor RESULT =null;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Traductor inicio = (Traductor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ValorElemento fin = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pasoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pasoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ValorElemento paso = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listadoInstruccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listadoInstruccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListadoInstrucciones listadoInstrucciones = (ListadoInstrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						Para para = new Para(inicio, fin, paso, listadoInstrucciones, getIdentacion());
						RESULT = para;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_para",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion_para_inicio ::= asignacion 
            {
              Traductor RESULT =null;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Asignacion asignacion = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = asignacion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_para_inicio",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion_para_inicio ::= declaracion 
            {
              Traductor RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaracion declaracion = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = declaracion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_para_inicio",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion ::= DATA_TYPE ID_VALUE 
            {
              Declaracion RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Elemento elemento = new Elemento(id.getLexema(), null, getIdentacion());
		Declaracion declaracion = new Declaracion(elemento, getIdentacion(), type.getLexema());
		RESULT = declaracion;
  	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion ::= DATA_TYPE asignacion 
            {
              Declaracion RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Asignacion asignacion = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Declaracion declaracion = new Declaracion(null, getIdentacion(), type.getLexema());
		declaracion.setAsignacion(asignacion);
		RESULT = declaracion;
  	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // asignacion ::= ID_VALUE IGUAL operacion_general 
            {
              Asignacion RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token nombre = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValorElemento valor1 = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Elemento elemento = new Elemento(nombre.getLexema(), valor1, getIdentacion());
		Asignacion asignacion = new Asignacion(elemento, getIdentacion());
		RESULT = asignacion;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operacion_general ::= operacion_general MAYOR operacion_general 
            {
              ValorElemento RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValorElemento valor1 = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValorElemento valor2 = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		RESULT = valor1;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operacion_general ::= operacion_general MENOR operacion_general 
            {
              ValorElemento RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValorElemento valor1 = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValorElemento valor2 = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		RESULT = valor1;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operacion_general ::= operacion_general MAYOR_IGUAL operacion_general 
            {
              ValorElemento RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValorElemento valor1 = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValorElemento valor2 = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		RESULT = valor1;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operacion_general ::= operacion_general MENOR_IGUAL operacion_general 
            {
              ValorElemento RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValorElemento valor1 = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValorElemento valor2 = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		RESULT = valor1;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operacion_general ::= operacion_general NO_IGUAL operacion_general 
            {
              ValorElemento RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValorElemento valor1 = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValorElemento valor2 = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		RESULT = valor1;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operacion_general ::= operacion_general IGUAL_IGUAL operacion_general 
            {
              ValorElemento RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValorElemento valor1 = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValorElemento valor2 = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		RESULT = valor1;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operacion_general ::= operacion_general SIGNO_MAS operacion_general 
            {
              ValorElemento RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValorElemento valor1 = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValorElemento valor2 = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		RESULT = valor1;		
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operacion_general ::= operacion_general SIGNO_MIN operacion_general 
            {
              ValorElemento RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValorElemento valor1 = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValorElemento valor2 = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		RESULT = valor1;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operacion_general ::= operacion_general SIGNO_POR operacion_general 
            {
              ValorElemento RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValorElemento valor1 = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValorElemento valor2 = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		RESULT = valor1;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operacion_general ::= operacion_general SIGNO_DIV operacion_general 
            {
              ValorElemento RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValorElemento valor1 = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValorElemento valor2 = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		RESULT = valor1;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operacion_general ::= valores_datos_primarios 
            {
              ValorElemento RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValorElemento valor1 = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		RESULT = valor1;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operacion_general ::= SIGNO_MIN operacion_general 
            {
              ValorElemento RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValorElemento valor1 = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		RESULT = valor1;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operacion_general ::= PAREN_INI operacion_general PAREN_FIN 
            {
              ValorElemento RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ValorElemento valor1 = (ValorElemento)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operacion_general ::= error 
            {
              ValorElemento RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // valores_datos_primarios ::= STRING_VALUE 
            {
              ValorElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ValorElemento(a.getLexema(), "string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores_datos_primarios",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // valores_datos_primarios ::= INTEGER_VALUE 
            {
              ValorElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ValorElemento(a.getLexema(), "integer"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores_datos_primarios",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valores_datos_primarios ::= ID_VALUE 
            {
              ValorElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ValorElemento(a.getLexema(), "integer"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores_datos_primarios",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
